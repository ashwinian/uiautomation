/// <reference types="node" />
export default class Runner extends EventEmitter {
    configParser: ConfigParser;
    sigintWasCalled: boolean;
    run({ cid, args, specs, caps, configFile, retries }: string): Promise<any>;
    cid: any;
    specs: any;
    caps: any;
    config: {
        specs: never[];
        suites: {};
        exclude: never[];
        outputDir: undefined;
        logLevel: string;
        logLevels: {};
        excludeDriverLogs: never[];
        bail: number;
        waitforInterval: number;
        waitforTimeout: number;
        framework: string;
        reporters: never[];
        services: never[];
        maxInstances: number;
        maxInstancesPerCapability: number;
        filesToWatch: never[];
        connectionRetryTimeout: number;
        connectionRetryCount: number;
        execArgv: never[];
        runnerEnv: {};
        runner: string;
        mochaOpts: {
            timeout: number;
        };
        jasmineNodeOpts: {
            defaultTimeoutInterval: number;
        };
        cucumberOpts: {
            timeout: number;
        };
        onPrepare: never[];
        onWorkerStart: never[];
        before: never[];
        beforeSession: never[];
        beforeSuite: never[];
        beforeHook: never[];
        beforeTest: never[];
        beforeCommand: never[];
        afterCommand: never[];
        afterTest: never[];
        afterHook: never[];
        afterSuite: never[];
        afterSession: never[];
        after: never[];
        onComplete: never[];
        onReload: never[];
        beforeFeature: never[];
        beforeScenario: never[];
        beforeStep: never[];
        afterStep: never[];
        afterScenario: never[];
        afterFeature: never[];
    } | undefined;
    isMultiremote: boolean | undefined;
    reporter: BaseReporter | undefined;
    framework: any;
    inWatchMode: boolean | undefined;
    _initSession(config: object, caps: Object, browserStub: Object): Promise<any>;
    _startSession(config: object, caps: Object): Promise<any>;
    _fetchDriverLogs(config: any, excludeDriverLogs: any): Promise<void[] | undefined>;
    _shutdown(failures: any): Promise<any>;
    endSession(): Promise<void>;
}
import EventEmitter from "events";
import { ConfigParser } from "@wdio/config";
import BaseReporter from "./reporter";
//# sourceMappingURL=index.d.ts.map