export default class ConfigParser {
    static getFilePaths(patterns: any, omitWarnings: any): string[];
    _config: {
        specs: never[];
        suites: {};
        exclude: never[];
        outputDir: undefined;
        logLevel: string;
        logLevels: {};
        excludeDriverLogs: never[];
        bail: number;
        waitforInterval: number;
        waitforTimeout: number;
        framework: string;
        reporters: never[];
        services: never[];
        maxInstances: number;
        maxInstancesPerCapability: number;
        filesToWatch: never[];
        connectionRetryTimeout: number;
        connectionRetryCount: number;
        execArgv: never[];
        runnerEnv: {};
        runner: string;
        mochaOpts: {
            timeout: number;
        };
        jasmineNodeOpts: {
            defaultTimeoutInterval: number;
        };
        cucumberOpts: {
            timeout: number;
        };
        onPrepare: never[];
        onWorkerStart: never[];
        before: never[];
        beforeSession: never[];
        beforeSuite: never[];
        beforeHook: never[];
        beforeTest: never[];
        beforeCommand: never[];
        afterCommand: never[];
        afterTest: never[];
        afterHook: never[];
        afterSuite: never[];
        afterSession: never[];
        after: never[];
        onComplete: never[];
        onReload: never[];
        beforeFeature: never[];
        beforeScenario: never[];
        beforeStep: never[];
        afterStep: never[];
        afterScenario: never[];
        afterFeature: never[];
    };
    _capabilities: any[];
    addConfigFile(filename: string): void;
    merge(object?: Object): void;
    addService(service: Object): void;
    getSpecs(capSpecs: any, capExclude: any): string[];
    setFilePathToFilterOptions(cliArgFileList: string, config: Object): string[];
    getConfig(): {
        specs: never[];
        suites: {};
        exclude: never[];
        outputDir: undefined;
        logLevel: string;
        logLevels: {};
        excludeDriverLogs: never[];
        bail: number;
        waitforInterval: number;
        waitforTimeout: number;
        framework: string;
        reporters: never[];
        services: never[];
        maxInstances: number;
        maxInstancesPerCapability: number;
        filesToWatch: never[];
        connectionRetryTimeout: number;
        connectionRetryCount: number;
        execArgv: never[];
        runnerEnv: {};
        runner: string;
        mochaOpts: {
            timeout: number;
        };
        jasmineNodeOpts: {
            defaultTimeoutInterval: number;
        };
        cucumberOpts: {
            timeout: number;
        };
        onPrepare: never[];
        onWorkerStart: never[];
        before: never[];
        beforeSession: never[];
        beforeSuite: never[];
        beforeHook: never[];
        beforeTest: never[];
        beforeCommand: never[];
        afterCommand: never[];
        afterTest: never[];
        afterHook: never[];
        afterSuite: never[];
        afterSession: never[];
        after: never[];
        onComplete: never[];
        onReload: never[];
        beforeFeature: never[];
        beforeScenario: never[];
        beforeStep: never[];
        afterStep: never[];
        afterScenario: never[];
        afterFeature: never[];
    };
    getCapabilities(i: any): any;
}
//# sourceMappingURL=ConfigParser.d.ts.map