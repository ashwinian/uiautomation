export default adapterFactory;
export namespace adapterFactory {
    function init(...args: any[]): Promise<MochaAdapter>;
}
export class MochaAdapter {
    constructor(cid: any, config: any, specs: any, capabilities: any, reporter: any);
    cid: any;
    capabilities: any;
    reporter: any;
    specs: any;
    config: any;
    runner: {};
    level: number;
    suiteCnt: Map<any, any>;
    hookCnt: Map<any, any>;
    testCnt: Map<any, any>;
    suiteIds: string[];
    _hasTests: boolean;
    specLoadError: Error | null;
    init(): Promise<MochaAdapter>;
    mocha: any;
    _loadFiles(mochaOpts: any): Promise<void>;
    hasTests(): boolean;
    run(): Promise<any>;
    options(options: any, context: any): void;
    preRequire(context: any, file: any, mocha: any): void;
    wrapHook(hookName: any): () => any;
    prepareMessage(hookName: any): {
        type: any;
    };
    formatMessage(params: any): {
        type: any;
    };
    requireExternalModules(modules: any, context: any): void;
    emit(event: any, payload: any, err: any): void;
    lastError: any;
    getSyncEventIdStart(type: any): string;
    getSyncEventIdEnd(type: any): string;
    getUID(message: any): string;
}
//# sourceMappingURL=index.d.ts.map