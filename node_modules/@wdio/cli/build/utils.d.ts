export function runServiceHook(launcher: any, hookName: any, ...args: any[]): Promise<undefined>;
export function runLauncherHook(hook: any[] | Function, ...args: any[]): Promise<any>;
export function runOnCompleteHook(onCompleteHook: any[] | Function, config: any, capabilities: any, exitCode: any, results: any): Promise<(1 | 0)[]>;
export function getRunnerName(caps?: {}): any;
export function findInConfig(config: any, type: any): any;
export function replaceConfig(config: any, type: any, name: any): any;
export function addServiceDeps(names: any, packages: any, update: any): void;
export function convertPackageHashToObject(string: any, hash?: string): {
    package: any;
    short: any;
};
export function renderConfigurationFile(answers: any): Promise<void>;
export function getCapabilities(arg: any): {
    capabilities: {
        deviceName: any;
        platformVersion: any;
        udid: any;
        platformName: string;
        automationName: string;
        app: any;
        browserName?: undefined;
    };
} | {
    capabilities: {
        deviceName: any;
        platformVersion: any;
        udid: any;
        platformName: string;
        automationName: string;
        browserName: string;
    };
} | {
    capabilities: {
        browserName: any;
    };
};
export function hasFile(filename: string): any;
export function generateTestFiles(answers: any): Promise<void>;
export function getAnswers(yes: any): Promise<any>;
export function getPathForFileGeneration(answers: any): {
    destSpecRootPath: string;
    destStepRootPath: string;
    destPageObjectRootPath: string;
    relativePath: string;
};
export function validateServiceAnswers(answers: any): boolean;
//# sourceMappingURL=utils.d.ts.map