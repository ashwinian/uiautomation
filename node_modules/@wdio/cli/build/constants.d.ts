export declare const CLI_EPILOGUE: string;
export declare const EXCLUSIVE_SERVICES: {
    'wdio-chromedriver-service': {
        services: string[];
        message: string;
    };
};
export declare const CONFIG_HELPER_INTRO = "\n=========================\nWDIO Configuration Helper\n=========================\n";
export declare const CONFIG_HELPER_SUCCESS_MESSAGE = "\nConfiguration file was created successfully!\nTo run your tests, execute:\n$ npx wdio run wdio.conf.js\n";
export declare const ANDROID_CONFIG: {
    platformName: string;
    automationName: string;
    deviceName: string;
};
export declare const IOS_CONFIG: {
    platformName: string;
    automationName: string;
    deviceName: string;
};
export declare const COMPILER_OPTIONS: {
    babel: string;
    ts: string;
    nil: string;
};
export declare const TS_COMPILER_INSTRUCTIONS = "To have TypeScript support please add the following packages to your \"types\" list:\n{\n  \"compilerOptions\": {\n    \"types\": [\"node\", %s]\n  }\n}\n\nFor for information on TypeScript integration check out: https://webdriver.io/docs/typescript.html\n";
export declare const SUPPORTED_PACKAGES: {
    runner: {
        name: string;
        value: string;
    }[];
    framework: {
        name: string;
        value: string;
    }[];
    reporter: {
        name: string;
        value: string;
    }[];
    service: {
        name: string;
        value: string;
    }[];
};
export declare const QUESTIONNAIRE: ({
    type: string;
    name: string;
    message: string;
    choices: {
        name: string;
        value: string;
    }[];
    when: () => boolean;
    default?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: string[];
    when?: undefined;
    default?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    when: (answers: any) => boolean;
    choices?: undefined;
    default?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: string;
    choices: string[];
    when: (answers: any) => boolean;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: string;
    when: (answers: any) => any;
    choices?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: string[];
    when: (answers: any) => boolean;
    default?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: {
        name: string;
        value: string;
    }[];
    when?: undefined;
    default?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: boolean;
    choices?: undefined;
    when?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: boolean;
    when: (answers: any) => any;
    choices?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: (answers: any) => "./test/pageobjects/**/*.js" | "./features/pageobjects/**/*.js";
    when: (answers: any) => any;
    choices?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: string[];
    default: () => string;
    when?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: {
        name: string;
        value: string;
    }[];
    default: string[];
    when?: undefined;
    validate?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    choices: {
        name: string;
        value: string;
    }[];
    default: string[];
    validate: (answers: any) => boolean;
    when?: undefined;
} | {
    type: string;
    name: string;
    message: string;
    default: string;
    choices?: undefined;
    when?: undefined;
    validate?: undefined;
})[];
//# sourceMappingURL=constants.d.ts.map