/// <reference types="node" />
export default class WDIOCLInterface extends EventEmitter {
    constructor(config: any, totalWorkerCnt: any, isWatchMode?: boolean);
    hasAnsiSupport: boolean;
    config: any;
    totalWorkerCnt: any;
    isWatchMode: boolean;
    inDebugMode: boolean;
    specFileRetries: any;
    specFileRetriesDelay: any;
    skippedSpecs: number;
    setup(): void;
    jobs: Map<any, any> | undefined;
    start: Date | undefined;
    result: {
        finished: number;
        passed: number;
        retries: number;
        failed: number;
    } | undefined;
    messages: {
        reporter: {};
        debugger: {};
    } | undefined;
    onStart(): void;
    onSpecRunning(cid: any): void;
    onSpecRetry(cid: any, job: any, retries: any): void;
    onSpecPass(cid: any, job: any, retries: any): void;
    onSpecFailure(cid: any, job: any, retries: any): void;
    onSpecSkip(cid: any, job: any): void;
    onJobComplete(cid: any, job: any, retries: any, message: any, _logger?: (...args: any[]) => any[]): any[];
    onTestError(payload: any): any[];
    getFilenames(specs?: any[]): string;
    addJob({ cid, caps, specs, hasTests }: {
        cid: any;
        caps: any;
        specs: any;
        hasTests: any;
    }): void;
    clearJob({ cid, passed, retries }: {
        cid: any;
        passed: any;
        retries: any;
    }): void;
    log(...args: any[]): any[];
    onMessage(event: any): any;
    sigintTrigger(): false | any[];
    printReporters(): void;
    printSummary(): any[];
    finalise(): void;
}
import EventEmitter from "events";
//# sourceMappingURL=interface.d.ts.map