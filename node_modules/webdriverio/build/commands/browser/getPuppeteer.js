"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_core_1 = __importDefault(require("puppeteer-core"));
const constants_1 = require("../../constants");
async function getPuppeteer() {
    if (this.puppeteer) {
        return this.puppeteer;
    }
    const chromiumOptions = this.capabilities['goog:chromeOptions'] || this.capabilities['ms:edgeOptions'];
    if (chromiumOptions && chromiumOptions.debuggerAddress) {
        this.puppeteer = await puppeteer_core_1.default.connect({
            browserURL: `http://${chromiumOptions.debuggerAddress}`,
            defaultViewport: null
        });
        return this.puppeteer;
    }
    if (this.capabilities.browserName.toLowerCase() === 'firefox') {
        const majorVersion = parseInt(this.capabilities.browserVersion.split('.').shift(), 10);
        if (majorVersion >= 79) {
            const ffOptions = this.capabilities['moz:firefoxOptions'];
            const ffArgs = this.requestedCapabilities['moz:firefoxOptions'].args;
            const rdPort = ffOptions && ffOptions.debuggerAddress
                ? ffOptions.debuggerAddress
                : ffArgs[ffArgs.findIndex((arg) => arg === constants_1.FF_REMOTE_DEBUG_ARG) + 1];
            this.puppeteer = await puppeteer_core_1.default.connect({
                browserURL: `http://localhost:${rdPort}`,
                defaultViewport: null
            });
            return this.puppeteer;
        }
    }
    throw new Error('Using DevTools capabilities is not supported for this session. ' +
        'This feature is only supported for local testing on Chrome, Firefox and Chromium Edge.');
}
exports.default = getPuppeteer;
