export default class MultiRemote {
    static elementWrapper(instances: any, result: any, propertiesObject: any): any;
    instances: {};
    addInstance(browserName: any, client: any): Promise<any>;
    modifier(wrapperClient: any): any;
    baseInstance: MultiRemoteDriver | undefined;
    commandWrapper(commandName: any): (...args: any[]) => Promise<any>;
}
declare class MultiRemoteDriver {
    constructor(instances: any, propertiesObject: any);
    instances: string[];
    isMultiremote: boolean;
    __propertiesObject__: any;
    on(...args: any[]): void;
    once(...args: any[]): void;
    emit(...args: any[]): void;
    eventNames(...args: any[]): void;
    getMaxListeners(): void;
    listenerCount(...args: any[]): void;
    listeners(...args: any[]): void;
    removeListener(...args: any[]): void;
    removeAllListeners(...args: any[]): void;
}
export {};
//# sourceMappingURL=multiremote.d.ts.map