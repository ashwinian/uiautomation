export const ELEMENT_KEY: "element-6066-11e4-a52e-4f735466cecf";
export namespace WDIO_DEFAULTS {
    export namespace automationProtocol {
        const type: string;
        function validate(param: any): void;
    }
    export namespace specs {
        const type_1: string;
        export { type_1 as type };
        export function validate_1(param: any): void;
        export { validate_1 as validate };
    }
    export namespace exclude {
        const type_2: string;
        export { type_2 as type };
        export function validate_2(param: any): void;
        export { validate_2 as validate };
    }
    export namespace suites {
        const type_3: string;
        export { type_3 as type };
    }
    export namespace capabilities {
        const type_4: string;
        export { type_4 as type };
        export function validate_3(param: any): boolean;
        export { validate_3 as validate };
        export const required: boolean;
    }
    export namespace baseUrl {
        const type_5: string;
        export { type_5 as type };
    }
    export namespace bail {
        const type_6: string;
        export { type_6 as type };
        const _default: number;
        export { _default as default };
    }
    export namespace waitforInterval {
        const type_7: string;
        export { type_7 as type };
        const _default_1: number;
        export { _default_1 as default };
    }
    export namespace waitforTimeout {
        const type_8: string;
        export { type_8 as type };
        const _default_2: number;
        export { _default_2 as default };
    }
    export namespace framework {
        const type_9: string;
        export { type_9 as type };
    }
    export namespace reporters {
        const type_10: string;
        export { type_10 as type };
        export function validate_4(param: any): boolean;
        export { validate_4 as validate };
    }
    export namespace services {
        const type_11: string;
        export { type_11 as type };
        export function validate_5(param: any): boolean;
        export { validate_5 as validate };
        const _default_3: never[];
        export { _default_3 as default };
    }
    export namespace execArgv {
        const type_12: string;
        export { type_12 as type };
        export function validate_6(param: any): void;
        export { validate_6 as validate };
        const _default_4: never[];
        export { _default_4 as default };
    }
    export namespace maxInstances {
        const type_13: string;
        export { type_13 as type };
    }
    export namespace maxInstancesPerCapability {
        const type_14: string;
        export { type_14 as type };
    }
    export namespace outputDir {
        const type_15: string;
        export { type_15 as type };
        const _default_5: string;
        export { _default_5 as default };
    }
    export namespace filesToWatch {
        const type_16: string;
        export { type_16 as type };
        export function validate_7(param: any): void;
        export { validate_7 as validate };
    }
    export { HOOK_DEFINITION as onPrepare };
    export { HOOK_DEFINITION as onWorkerStart };
    export { HOOK_DEFINITION as before };
    export { HOOK_DEFINITION as beforeSession };
    export { HOOK_DEFINITION as beforeSuite };
    export { HOOK_DEFINITION as beforeHook };
    export { HOOK_DEFINITION as beforeTest };
    export { HOOK_DEFINITION as beforeCommand };
    export { HOOK_DEFINITION as afterCommand };
    export { HOOK_DEFINITION as afterTest };
    export { HOOK_DEFINITION as afterHook };
    export { HOOK_DEFINITION as afterSuite };
    export { HOOK_DEFINITION as afterSession };
    export { HOOK_DEFINITION as after };
    export { HOOK_DEFINITION as onComplete };
    export { HOOK_DEFINITION as onReload };
    export { HOOK_DEFINITION as beforeFeature };
    export { HOOK_DEFINITION as beforeScenario };
    export { HOOK_DEFINITION as beforeStep };
    export { HOOK_DEFINITION as afterStep };
    export { HOOK_DEFINITION as afterScenario };
    export { HOOK_DEFINITION as afterFeature };
}
export const UNICODE_CHARACTERS: {
    NULL: string;
    Unidentified: string;
    Cancel: string;
    Help: string;
    'Back space': string;
    Backspace: string;
    Tab: string;
    Clear: string;
    Return: string;
    Enter: string;
    Shift: string;
    Control: string;
    'Control Left': string;
    'Control Right': string;
    Alt: string;
    Pause: string;
    Escape: string;
    Space: string;
    ' ': string;
    Pageup: string;
    PageUp: string;
    Page_Up: string;
    Pagedown: string;
    PageDown: string;
    Page_Down: string;
    End: string;
    Home: string;
    'Left arrow': string;
    Arrow_Left: string;
    ArrowLeft: string;
    'Up arrow': string;
    Arrow_Up: string;
    ArrowUp: string;
    'Right arrow': string;
    Arrow_Right: string;
    ArrowRight: string;
    'Down arrow': string;
    Arrow_Down: string;
    ArrowDown: string;
    Insert: string;
    Delete: string;
    Semicolon: string;
    Equals: string;
    'Numpad 0': string;
    'Numpad 1': string;
    'Numpad 2': string;
    'Numpad 3': string;
    'Numpad 4': string;
    'Numpad 5': string;
    'Numpad 6': string;
    'Numpad 7': string;
    'Numpad 8': string;
    'Numpad 9': string;
    Multiply: string;
    Add: string;
    Separator: string;
    Subtract: string;
    Decimal: string;
    Divide: string;
    F1: string;
    F2: string;
    F3: string;
    F4: string;
    F5: string;
    F6: string;
    F7: string;
    F8: string;
    F9: string;
    F10: string;
    F11: string;
    F12: string;
    Command: string;
    Meta: string;
    Zenkaku_Hankaku: string;
    ZenkakuHankaku: string;
};
export const W3C_SELECTOR_STRATEGIES: string[];
export const W3C_CAPABILITIES: string[];
export const JSONWP_CAPABILITIES: string[];
export const APPIUM_ANDROID_CAPABILITIES: string[];
export const APPIUM_IOS_CAPABILITIES: string[];
export const APPIUM_CAPABILITES: string[];
export namespace DRIVER_DEFAULT_ENDPOINT {
    const method: string;
    const host: string;
    const port: number;
    const path: string;
}
export const FF_REMOTE_DEBUG_ARG: "-remote-debugging-port";
export const ERROR_REASON: string[];
declare namespace HOOK_DEFINITION {
    const type_17: string;
    export { type_17 as type };
    export function validate_8(param: any): boolean;
    export { validate_8 as validate };
}
export {};
//# sourceMappingURL=constants.d.ts.map